@page "/event"
@inject IEventRepository _eventRepository


@code {
	private bool IsLoading { get; set; } = false;
	private string id { get; set; } = "04cec5fb-256f-4c50-8ed5-d5ffeb54b66d";
	private IEnumerable<EventDTO> Events { get; set; } = Enumerable.Empty<EventDTO>();
	

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			try
			{
				await LoadEvents(id);

			}
			catch (Exception ex)
			{
				Console.WriteLine($"{ex.GetType()}: {ex.Message}");
			}
		}
	}

	private async ValueTask LoadEvents(string id)
	{
		IsLoading = true;
		StateHasChanged();

		Events = await _eventRepository.GetAll(id);

		IsLoading = false;
		StateHasChanged();
	}
}
